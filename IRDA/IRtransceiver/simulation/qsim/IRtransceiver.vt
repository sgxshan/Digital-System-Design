// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/10/2015 10:44:25"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    IRtransceiver
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module IRtransceiver_vlg_sample_tst(
	clk,
	Input,
	IRDA_RXD,
	reset,
	send,
	sampler_tx
);
input  clk;
input [7:0] Input;
input  IRDA_RXD;
input  reset;
input  send;
output sampler_tx;

reg sample;
time current_time;
always @(clk or Input or IRDA_RXD or reset or send)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module IRtransceiver_vlg_check_tst (
	framing_error,
	IRDA_TXD,
	parity_error,
	pin_name1,
	segL,
	segR,
	sampler_rx
);
input  framing_error;
input  IRDA_TXD;
input  parity_error;
input  pin_name1;
input [6:0] segL;
input [6:0] segR;
input sampler_rx;

reg  framing_error_expected;
reg  IRDA_TXD_expected;
reg  parity_error_expected;
reg  pin_name1_expected;
reg [6:0] segL_expected;
reg [6:0] segR_expected;

reg  framing_error_prev;
reg  IRDA_TXD_prev;
reg  parity_error_prev;
reg  pin_name1_prev;
reg [6:0] segL_prev;
reg [6:0] segR_prev;

reg  framing_error_expected_prev;
reg  IRDA_TXD_expected_prev;
reg  parity_error_expected_prev;
reg  pin_name1_expected_prev;
reg [6:0] segL_expected_prev;
reg [6:0] segR_expected_prev;

reg  last_framing_error_exp;
reg  last_IRDA_TXD_exp;
reg  last_parity_error_exp;
reg  last_pin_name1_exp;
reg [6:0] last_segL_exp;
reg [6:0] last_segR_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:6] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 6'b1;
end

// update real /o prevs

always @(trigger)
begin
	framing_error_prev = framing_error;
	IRDA_TXD_prev = IRDA_TXD;
	parity_error_prev = parity_error;
	pin_name1_prev = pin_name1;
	segL_prev = segL;
	segR_prev = segR;
end

// update expected /o prevs

always @(trigger)
begin
	framing_error_expected_prev = framing_error_expected;
	IRDA_TXD_expected_prev = IRDA_TXD_expected;
	parity_error_expected_prev = parity_error_expected;
	pin_name1_expected_prev = pin_name1_expected;
	segL_expected_prev = segL_expected;
	segR_expected_prev = segR_expected;
end



// expected pin_name1
initial
begin
	pin_name1_expected = 1'bX;
	pin_name1_expected = #999000 1'b0;
end 

// expected IRDA_TXD
initial
begin
	IRDA_TXD_expected = 1'bX;
	IRDA_TXD_expected = #999000 1'b0;
end 
// expected segR[ 6 ]
initial
begin
	segR_expected[6] = 1'bX;
	segR_expected[6] = #999000 1'b0;
end 
// expected segR[ 5 ]
initial
begin
	segR_expected[5] = 1'bX;
	segR_expected[5] = #999000 1'b0;
end 
// expected segR[ 4 ]
initial
begin
	segR_expected[4] = 1'bX;
	segR_expected[4] = #999000 1'b0;
end 
// expected segR[ 3 ]
initial
begin
	segR_expected[3] = 1'bX;
	segR_expected[3] = #999000 1'b0;
end 
// expected segR[ 2 ]
initial
begin
	segR_expected[2] = 1'bX;
	segR_expected[2] = #999000 1'b0;
end 
// expected segR[ 1 ]
initial
begin
	segR_expected[1] = 1'bX;
	segR_expected[1] = #999000 1'b0;
end 
// expected segR[ 0 ]
initial
begin
	segR_expected[0] = 1'bX;
	segR_expected[0] = #999000 1'b0;
end 
// expected segL[ 6 ]
initial
begin
	segL_expected[6] = 1'bX;
	segL_expected[6] = #999000 1'b0;
end 
// expected segL[ 5 ]
initial
begin
	segL_expected[5] = 1'bX;
	segL_expected[5] = #999000 1'b0;
end 
// expected segL[ 4 ]
initial
begin
	segL_expected[4] = 1'bX;
	segL_expected[4] = #999000 1'b0;
end 
// expected segL[ 3 ]
initial
begin
	segL_expected[3] = 1'bX;
	segL_expected[3] = #999000 1'b0;
end 
// expected segL[ 2 ]
initial
begin
	segL_expected[2] = 1'bX;
	segL_expected[2] = #999000 1'b0;
end 
// expected segL[ 1 ]
initial
begin
	segL_expected[1] = 1'bX;
	segL_expected[1] = #999000 1'b0;
end 
// expected segL[ 0 ]
initial
begin
	segL_expected[0] = 1'bX;
	segL_expected[0] = #999000 1'b0;
end 

// expected framing_error
initial
begin
	framing_error_expected = 1'bX;
	framing_error_expected = #999000 1'b0;
end 

// expected parity_error
initial
begin
	parity_error_expected = 1'bX;
	parity_error_expected = #999000 1'b0;
end 
// generate trigger
always @(framing_error_expected or framing_error or IRDA_TXD_expected or IRDA_TXD or parity_error_expected or parity_error or pin_name1_expected or pin_name1 or segL_expected or segL or segR_expected or segR)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected framing_error = %b | expected IRDA_TXD = %b | expected parity_error = %b | expected pin_name1 = %b | expected segL = %b | expected segR = %b | ",framing_error_expected_prev,IRDA_TXD_expected_prev,parity_error_expected_prev,pin_name1_expected_prev,segL_expected_prev,segR_expected_prev);
	$display("| real framing_error = %b | real IRDA_TXD = %b | real parity_error = %b | real pin_name1 = %b | real segL = %b | real segR = %b | ",framing_error_prev,IRDA_TXD_prev,parity_error_prev,pin_name1_prev,segL_prev,segR_prev);
`endif
	if (
		( framing_error_expected_prev !== 1'bx ) && ( framing_error_prev !== framing_error_expected_prev )
		&& ((framing_error_expected_prev !== last_framing_error_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port framing_error :: @time = %t",  $realtime);
		$display ("     Expected value = %b", framing_error_expected_prev);
		$display ("     Real value = %b", framing_error_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_framing_error_exp = framing_error_expected_prev;
	end
	if (
		( IRDA_TXD_expected_prev !== 1'bx ) && ( IRDA_TXD_prev !== IRDA_TXD_expected_prev )
		&& ((IRDA_TXD_expected_prev !== last_IRDA_TXD_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IRDA_TXD :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IRDA_TXD_expected_prev);
		$display ("     Real value = %b", IRDA_TXD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_IRDA_TXD_exp = IRDA_TXD_expected_prev;
	end
	if (
		( parity_error_expected_prev !== 1'bx ) && ( parity_error_prev !== parity_error_expected_prev )
		&& ((parity_error_expected_prev !== last_parity_error_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port parity_error :: @time = %t",  $realtime);
		$display ("     Expected value = %b", parity_error_expected_prev);
		$display ("     Real value = %b", parity_error_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_parity_error_exp = parity_error_expected_prev;
	end
	if (
		( pin_name1_expected_prev !== 1'bx ) && ( pin_name1_prev !== pin_name1_expected_prev )
		&& ((pin_name1_expected_prev !== last_pin_name1_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pin_name1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pin_name1_expected_prev);
		$display ("     Real value = %b", pin_name1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_pin_name1_exp = pin_name1_expected_prev;
	end
	if (
		( segL_expected_prev[0] !== 1'bx ) && ( segL_prev[0] !== segL_expected_prev[0] )
		&& ((segL_expected_prev[0] !== last_segL_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segL[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segL_expected_prev);
		$display ("     Real value = %b", segL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_segL_exp[0] = segL_expected_prev[0];
	end
	if (
		( segL_expected_prev[1] !== 1'bx ) && ( segL_prev[1] !== segL_expected_prev[1] )
		&& ((segL_expected_prev[1] !== last_segL_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segL[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segL_expected_prev);
		$display ("     Real value = %b", segL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_segL_exp[1] = segL_expected_prev[1];
	end
	if (
		( segL_expected_prev[2] !== 1'bx ) && ( segL_prev[2] !== segL_expected_prev[2] )
		&& ((segL_expected_prev[2] !== last_segL_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segL[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segL_expected_prev);
		$display ("     Real value = %b", segL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_segL_exp[2] = segL_expected_prev[2];
	end
	if (
		( segL_expected_prev[3] !== 1'bx ) && ( segL_prev[3] !== segL_expected_prev[3] )
		&& ((segL_expected_prev[3] !== last_segL_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segL[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segL_expected_prev);
		$display ("     Real value = %b", segL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_segL_exp[3] = segL_expected_prev[3];
	end
	if (
		( segL_expected_prev[4] !== 1'bx ) && ( segL_prev[4] !== segL_expected_prev[4] )
		&& ((segL_expected_prev[4] !== last_segL_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segL[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segL_expected_prev);
		$display ("     Real value = %b", segL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_segL_exp[4] = segL_expected_prev[4];
	end
	if (
		( segL_expected_prev[5] !== 1'bx ) && ( segL_prev[5] !== segL_expected_prev[5] )
		&& ((segL_expected_prev[5] !== last_segL_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segL[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segL_expected_prev);
		$display ("     Real value = %b", segL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_segL_exp[5] = segL_expected_prev[5];
	end
	if (
		( segL_expected_prev[6] !== 1'bx ) && ( segL_prev[6] !== segL_expected_prev[6] )
		&& ((segL_expected_prev[6] !== last_segL_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segL[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segL_expected_prev);
		$display ("     Real value = %b", segL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_segL_exp[6] = segL_expected_prev[6];
	end
	if (
		( segR_expected_prev[0] !== 1'bx ) && ( segR_prev[0] !== segR_expected_prev[0] )
		&& ((segR_expected_prev[0] !== last_segR_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segR[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segR_expected_prev);
		$display ("     Real value = %b", segR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_segR_exp[0] = segR_expected_prev[0];
	end
	if (
		( segR_expected_prev[1] !== 1'bx ) && ( segR_prev[1] !== segR_expected_prev[1] )
		&& ((segR_expected_prev[1] !== last_segR_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segR[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segR_expected_prev);
		$display ("     Real value = %b", segR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_segR_exp[1] = segR_expected_prev[1];
	end
	if (
		( segR_expected_prev[2] !== 1'bx ) && ( segR_prev[2] !== segR_expected_prev[2] )
		&& ((segR_expected_prev[2] !== last_segR_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segR[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segR_expected_prev);
		$display ("     Real value = %b", segR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_segR_exp[2] = segR_expected_prev[2];
	end
	if (
		( segR_expected_prev[3] !== 1'bx ) && ( segR_prev[3] !== segR_expected_prev[3] )
		&& ((segR_expected_prev[3] !== last_segR_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segR[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segR_expected_prev);
		$display ("     Real value = %b", segR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_segR_exp[3] = segR_expected_prev[3];
	end
	if (
		( segR_expected_prev[4] !== 1'bx ) && ( segR_prev[4] !== segR_expected_prev[4] )
		&& ((segR_expected_prev[4] !== last_segR_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segR[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segR_expected_prev);
		$display ("     Real value = %b", segR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_segR_exp[4] = segR_expected_prev[4];
	end
	if (
		( segR_expected_prev[5] !== 1'bx ) && ( segR_prev[5] !== segR_expected_prev[5] )
		&& ((segR_expected_prev[5] !== last_segR_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segR[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segR_expected_prev);
		$display ("     Real value = %b", segR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_segR_exp[5] = segR_expected_prev[5];
	end
	if (
		( segR_expected_prev[6] !== 1'bx ) && ( segR_prev[6] !== segR_expected_prev[6] )
		&& ((segR_expected_prev[6] !== last_segR_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segR[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segR_expected_prev);
		$display ("     Real value = %b", segR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_segR_exp[6] = segR_expected_prev[6];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#99000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module IRtransceiver_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [7:0] Input;
reg IRDA_RXD;
reg reset;
reg send;
// wires                                               
wire framing_error;
wire IRDA_TXD;
wire parity_error;
wire pin_name1;
wire [6:0] segL;
wire [6:0] segR;

wire sampler;                             

// assign statements (if any)                          
IRtransceiver i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.framing_error(framing_error),
	.\Input (Input),
	.IRDA_RXD(IRDA_RXD),
	.IRDA_TXD(IRDA_TXD),
	.parity_error(parity_error),
	.pin_name1(pin_name1),
	.reset(reset),
	.segL(segL),
	.segR(segR),
	.send(send)
);

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 

// reset
initial
begin
	reset = 1'b1;
	reset = #1280000 1'b0;
end 

// send
initial
begin
	send = 1'b0;
	send = #1280000 1'b1;
	send = #14080000 1'b0;
end 
// \Input [ 7 ]
initial
begin
	Input[7] = 1'b0;
end 
// \Input [ 6 ]
initial
begin
	Input[6] = 1'b0;
end 
// \Input [ 5 ]
initial
begin
	Input[5] = 1'b1;
end 
// \Input [ 4 ]
initial
begin
	Input[4] = 1'b0;
end 
// \Input [ 3 ]
initial
begin
	Input[3] = 1'b1;
end 
// \Input [ 2 ]
initial
begin
	Input[2] = 1'b0;
end 
// \Input [ 1 ]
initial
begin
	Input[1] = 1'b1;
end 
// \Input [ 0 ]
initial
begin
	Input[0] = 1'b0;
end 

// IRDA_RXD
initial
begin
	IRDA_RXD = 1'b0;
end 

IRtransceiver_vlg_sample_tst tb_sample (
	.clk(clk),
	.Input(Input),
	.IRDA_RXD(IRDA_RXD),
	.reset(reset),
	.send(send),
	.sampler_tx(sampler)
);

IRtransceiver_vlg_check_tst tb_out(
	.framing_error(framing_error),
	.IRDA_TXD(IRDA_TXD),
	.parity_error(parity_error),
	.pin_name1(pin_name1),
	.segL(segL),
	.segR(segR),
	.sampler_rx(sampler)
);
endmodule

