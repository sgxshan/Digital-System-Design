// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/12/2015 18:13:11"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    receiver
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module receiver_vlg_sample_tst(
	clk,
	data_in,
	reset,
	sampler_tx
);
input  clk;
input  data_in;
input  reset;
output sampler_tx;

reg sample;
time current_time;
always @(clk or data_in or reset)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module receiver_vlg_check_tst (
	7seg1,
	7seg2,
	baud_done,
	framing_error,
	half_baud2,
	output,
	parity_error,
	sampler_rx
);
input [6:0] 7seg1;
input [6:0] 7seg2;
input  baud_done;
input  framing_error;
input  half_baud2;
input [9:0] output;
input  parity_error;
input sampler_rx;

reg [6:0] 7seg1_expected;
reg [6:0] 7seg2_expected;
reg  baud_done_expected;
reg  framing_error_expected;
reg  half_baud2_expected;
reg [9:0] output_expected;
reg  parity_error_expected;

reg [6:0] 7seg1_prev;
reg [6:0] 7seg2_prev;
reg  baud_done_prev;
reg  framing_error_prev;
reg  half_baud2_prev;
reg [9:0] output_prev;
reg  parity_error_prev;

reg [6:0] 7seg1_expected_prev;
reg [6:0] 7seg2_expected_prev;
reg  baud_done_expected_prev;
reg  framing_error_expected_prev;
reg  half_baud2_expected_prev;
reg [9:0] output_expected_prev;
reg  parity_error_expected_prev;

reg [6:0] last_7seg1_exp;
reg [6:0] last_7seg2_exp;
reg  last_baud_done_exp;
reg  last_framing_error_exp;
reg  last_half_baud2_exp;
reg [9:0] last_output_exp;
reg  last_parity_error_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:7] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 7'b1;
end

// update real /o prevs

always @(trigger)
begin
	7seg1_prev = 7seg1;
	7seg2_prev = 7seg2;
	baud_done_prev = baud_done;
	framing_error_prev = framing_error;
	half_baud2_prev = half_baud2;
	output_prev = output;
	parity_error_prev = parity_error;
end

// update expected /o prevs

always @(trigger)
begin
	7seg1_expected_prev = 7seg1_expected;
	7seg2_expected_prev = 7seg2_expected;
	baud_done_expected_prev = baud_done_expected;
	framing_error_expected_prev = framing_error_expected;
	half_baud2_expected_prev = half_baud2_expected;
	output_expected_prev = output_expected;
	parity_error_expected_prev = parity_error_expected;
end



// expected half_baud2
initial
begin
	half_baud2_expected = 1'bX;
end 

// expected baud_done
initial
begin
	baud_done_expected = 1'bX;
end 
// expected \output [ 9 ]
initial
begin
	output_expected[9] = 1'bX;
end 
// expected \output [ 8 ]
initial
begin
	output_expected[8] = 1'bX;
end 
// expected \output [ 7 ]
initial
begin
	output_expected[7] = 1'bX;
end 
// expected \output [ 6 ]
initial
begin
	output_expected[6] = 1'bX;
end 
// expected \output [ 5 ]
initial
begin
	output_expected[5] = 1'bX;
end 
// expected \output [ 4 ]
initial
begin
	output_expected[4] = 1'bX;
end 
// expected \output [ 3 ]
initial
begin
	output_expected[3] = 1'bX;
end 
// expected \output [ 2 ]
initial
begin
	output_expected[2] = 1'bX;
end 
// expected \output [ 1 ]
initial
begin
	output_expected[1] = 1'bX;
end 
// expected \output [ 0 ]
initial
begin
	output_expected[0] = 1'bX;
end 

// expected framing_error
initial
begin
	framing_error_expected = 1'bX;
end 

// expected parity_error
initial
begin
	parity_error_expected = 1'bX;
end 
// expected \7seg1 [ 6 ]
initial
begin
	7seg1_expected[6] = 1'bX;
end 
// expected \7seg1 [ 5 ]
initial
begin
	7seg1_expected[5] = 1'bX;
end 
// expected \7seg1 [ 4 ]
initial
begin
	7seg1_expected[4] = 1'bX;
end 
// expected \7seg1 [ 3 ]
initial
begin
	7seg1_expected[3] = 1'bX;
end 
// expected \7seg1 [ 2 ]
initial
begin
	7seg1_expected[2] = 1'bX;
end 
// expected \7seg1 [ 1 ]
initial
begin
	7seg1_expected[1] = 1'bX;
end 
// expected \7seg1 [ 0 ]
initial
begin
	7seg1_expected[0] = 1'bX;
end 
// expected \7seg2 [ 6 ]
initial
begin
	7seg2_expected[6] = 1'bX;
end 
// expected \7seg2 [ 5 ]
initial
begin
	7seg2_expected[5] = 1'bX;
end 
// expected \7seg2 [ 4 ]
initial
begin
	7seg2_expected[4] = 1'bX;
end 
// expected \7seg2 [ 3 ]
initial
begin
	7seg2_expected[3] = 1'bX;
end 
// expected \7seg2 [ 2 ]
initial
begin
	7seg2_expected[2] = 1'bX;
end 
// expected \7seg2 [ 1 ]
initial
begin
	7seg2_expected[1] = 1'bX;
end 
// expected \7seg2 [ 0 ]
initial
begin
	7seg2_expected[0] = 1'bX;
end 
// generate trigger
always @(7seg1_expected or 7seg1 or 7seg2_expected or 7seg2 or baud_done_expected or baud_done or framing_error_expected or framing_error or half_baud2_expected or half_baud2 or output_expected or output or parity_error_expected or parity_error)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected 7seg1 = %b | expected 7seg2 = %b | expected baud_done = %b | expected framing_error = %b | expected half_baud2 = %b | expected output = %b | expected parity_error = %b | ",7seg1_expected_prev,7seg2_expected_prev,baud_done_expected_prev,framing_error_expected_prev,half_baud2_expected_prev,output_expected_prev,parity_error_expected_prev);
	$display("| real 7seg1 = %b | real 7seg2 = %b | real baud_done = %b | real framing_error = %b | real half_baud2 = %b | real output = %b | real parity_error = %b | ",7seg1_prev,7seg2_prev,baud_done_prev,framing_error_prev,half_baud2_prev,output_prev,parity_error_prev);
`endif
	if (
		( 7seg1_expected_prev[0] !== 1'bx ) && ( 7seg1_prev[0] !== 7seg1_expected_prev[0] )
		&& ((7seg1_expected_prev[0] !== last_7seg1_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port 7seg1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", 7seg1_expected_prev);
		$display ("     Real value = %b", 7seg1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_7seg1_exp[0] = 7seg1_expected_prev[0];
	end
	if (
		( 7seg1_expected_prev[1] !== 1'bx ) && ( 7seg1_prev[1] !== 7seg1_expected_prev[1] )
		&& ((7seg1_expected_prev[1] !== last_7seg1_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port 7seg1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", 7seg1_expected_prev);
		$display ("     Real value = %b", 7seg1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_7seg1_exp[1] = 7seg1_expected_prev[1];
	end
	if (
		( 7seg1_expected_prev[2] !== 1'bx ) && ( 7seg1_prev[2] !== 7seg1_expected_prev[2] )
		&& ((7seg1_expected_prev[2] !== last_7seg1_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port 7seg1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", 7seg1_expected_prev);
		$display ("     Real value = %b", 7seg1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_7seg1_exp[2] = 7seg1_expected_prev[2];
	end
	if (
		( 7seg1_expected_prev[3] !== 1'bx ) && ( 7seg1_prev[3] !== 7seg1_expected_prev[3] )
		&& ((7seg1_expected_prev[3] !== last_7seg1_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port 7seg1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", 7seg1_expected_prev);
		$display ("     Real value = %b", 7seg1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_7seg1_exp[3] = 7seg1_expected_prev[3];
	end
	if (
		( 7seg1_expected_prev[4] !== 1'bx ) && ( 7seg1_prev[4] !== 7seg1_expected_prev[4] )
		&& ((7seg1_expected_prev[4] !== last_7seg1_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port 7seg1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", 7seg1_expected_prev);
		$display ("     Real value = %b", 7seg1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_7seg1_exp[4] = 7seg1_expected_prev[4];
	end
	if (
		( 7seg1_expected_prev[5] !== 1'bx ) && ( 7seg1_prev[5] !== 7seg1_expected_prev[5] )
		&& ((7seg1_expected_prev[5] !== last_7seg1_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port 7seg1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", 7seg1_expected_prev);
		$display ("     Real value = %b", 7seg1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_7seg1_exp[5] = 7seg1_expected_prev[5];
	end
	if (
		( 7seg1_expected_prev[6] !== 1'bx ) && ( 7seg1_prev[6] !== 7seg1_expected_prev[6] )
		&& ((7seg1_expected_prev[6] !== last_7seg1_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port 7seg1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", 7seg1_expected_prev);
		$display ("     Real value = %b", 7seg1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_7seg1_exp[6] = 7seg1_expected_prev[6];
	end
	if (
		( 7seg2_expected_prev[0] !== 1'bx ) && ( 7seg2_prev[0] !== 7seg2_expected_prev[0] )
		&& ((7seg2_expected_prev[0] !== last_7seg2_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port 7seg2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", 7seg2_expected_prev);
		$display ("     Real value = %b", 7seg2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_7seg2_exp[0] = 7seg2_expected_prev[0];
	end
	if (
		( 7seg2_expected_prev[1] !== 1'bx ) && ( 7seg2_prev[1] !== 7seg2_expected_prev[1] )
		&& ((7seg2_expected_prev[1] !== last_7seg2_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port 7seg2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", 7seg2_expected_prev);
		$display ("     Real value = %b", 7seg2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_7seg2_exp[1] = 7seg2_expected_prev[1];
	end
	if (
		( 7seg2_expected_prev[2] !== 1'bx ) && ( 7seg2_prev[2] !== 7seg2_expected_prev[2] )
		&& ((7seg2_expected_prev[2] !== last_7seg2_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port 7seg2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", 7seg2_expected_prev);
		$display ("     Real value = %b", 7seg2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_7seg2_exp[2] = 7seg2_expected_prev[2];
	end
	if (
		( 7seg2_expected_prev[3] !== 1'bx ) && ( 7seg2_prev[3] !== 7seg2_expected_prev[3] )
		&& ((7seg2_expected_prev[3] !== last_7seg2_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port 7seg2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", 7seg2_expected_prev);
		$display ("     Real value = %b", 7seg2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_7seg2_exp[3] = 7seg2_expected_prev[3];
	end
	if (
		( 7seg2_expected_prev[4] !== 1'bx ) && ( 7seg2_prev[4] !== 7seg2_expected_prev[4] )
		&& ((7seg2_expected_prev[4] !== last_7seg2_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port 7seg2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", 7seg2_expected_prev);
		$display ("     Real value = %b", 7seg2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_7seg2_exp[4] = 7seg2_expected_prev[4];
	end
	if (
		( 7seg2_expected_prev[5] !== 1'bx ) && ( 7seg2_prev[5] !== 7seg2_expected_prev[5] )
		&& ((7seg2_expected_prev[5] !== last_7seg2_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port 7seg2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", 7seg2_expected_prev);
		$display ("     Real value = %b", 7seg2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_7seg2_exp[5] = 7seg2_expected_prev[5];
	end
	if (
		( 7seg2_expected_prev[6] !== 1'bx ) && ( 7seg2_prev[6] !== 7seg2_expected_prev[6] )
		&& ((7seg2_expected_prev[6] !== last_7seg2_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port 7seg2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", 7seg2_expected_prev);
		$display ("     Real value = %b", 7seg2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_7seg2_exp[6] = 7seg2_expected_prev[6];
	end
	if (
		( baud_done_expected_prev !== 1'bx ) && ( baud_done_prev !== baud_done_expected_prev )
		&& ((baud_done_expected_prev !== last_baud_done_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port baud_done :: @time = %t",  $realtime);
		$display ("     Expected value = %b", baud_done_expected_prev);
		$display ("     Real value = %b", baud_done_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_baud_done_exp = baud_done_expected_prev;
	end
	if (
		( framing_error_expected_prev !== 1'bx ) && ( framing_error_prev !== framing_error_expected_prev )
		&& ((framing_error_expected_prev !== last_framing_error_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port framing_error :: @time = %t",  $realtime);
		$display ("     Expected value = %b", framing_error_expected_prev);
		$display ("     Real value = %b", framing_error_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_framing_error_exp = framing_error_expected_prev;
	end
	if (
		( half_baud2_expected_prev !== 1'bx ) && ( half_baud2_prev !== half_baud2_expected_prev )
		&& ((half_baud2_expected_prev !== last_half_baud2_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port half_baud2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", half_baud2_expected_prev);
		$display ("     Real value = %b", half_baud2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_half_baud2_exp = half_baud2_expected_prev;
	end
	if (
		( output_expected_prev[0] !== 1'bx ) && ( output_prev[0] !== output_expected_prev[0] )
		&& ((output_expected_prev[0] !== last_output_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_expected_prev);
		$display ("     Real value = %b", output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_output_exp[0] = output_expected_prev[0];
	end
	if (
		( output_expected_prev[1] !== 1'bx ) && ( output_prev[1] !== output_expected_prev[1] )
		&& ((output_expected_prev[1] !== last_output_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_expected_prev);
		$display ("     Real value = %b", output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_output_exp[1] = output_expected_prev[1];
	end
	if (
		( output_expected_prev[2] !== 1'bx ) && ( output_prev[2] !== output_expected_prev[2] )
		&& ((output_expected_prev[2] !== last_output_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_expected_prev);
		$display ("     Real value = %b", output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_output_exp[2] = output_expected_prev[2];
	end
	if (
		( output_expected_prev[3] !== 1'bx ) && ( output_prev[3] !== output_expected_prev[3] )
		&& ((output_expected_prev[3] !== last_output_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_expected_prev);
		$display ("     Real value = %b", output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_output_exp[3] = output_expected_prev[3];
	end
	if (
		( output_expected_prev[4] !== 1'bx ) && ( output_prev[4] !== output_expected_prev[4] )
		&& ((output_expected_prev[4] !== last_output_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_expected_prev);
		$display ("     Real value = %b", output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_output_exp[4] = output_expected_prev[4];
	end
	if (
		( output_expected_prev[5] !== 1'bx ) && ( output_prev[5] !== output_expected_prev[5] )
		&& ((output_expected_prev[5] !== last_output_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_expected_prev);
		$display ("     Real value = %b", output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_output_exp[5] = output_expected_prev[5];
	end
	if (
		( output_expected_prev[6] !== 1'bx ) && ( output_prev[6] !== output_expected_prev[6] )
		&& ((output_expected_prev[6] !== last_output_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_expected_prev);
		$display ("     Real value = %b", output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_output_exp[6] = output_expected_prev[6];
	end
	if (
		( output_expected_prev[7] !== 1'bx ) && ( output_prev[7] !== output_expected_prev[7] )
		&& ((output_expected_prev[7] !== last_output_exp[7]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_expected_prev);
		$display ("     Real value = %b", output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_output_exp[7] = output_expected_prev[7];
	end
	if (
		( output_expected_prev[8] !== 1'bx ) && ( output_prev[8] !== output_expected_prev[8] )
		&& ((output_expected_prev[8] !== last_output_exp[8]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_expected_prev);
		$display ("     Real value = %b", output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_output_exp[8] = output_expected_prev[8];
	end
	if (
		( output_expected_prev[9] !== 1'bx ) && ( output_prev[9] !== output_expected_prev[9] )
		&& ((output_expected_prev[9] !== last_output_exp[9]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_expected_prev);
		$display ("     Real value = %b", output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_output_exp[9] = output_expected_prev[9];
	end
	if (
		( parity_error_expected_prev !== 1'bx ) && ( parity_error_prev !== parity_error_expected_prev )
		&& ((parity_error_expected_prev !== last_parity_error_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port parity_error :: @time = %t",  $realtime);
		$display ("     Expected value = %b", parity_error_expected_prev);
		$display ("     Real value = %b", parity_error_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_parity_error_exp = parity_error_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#50000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$stop;
end 
endmodule

module receiver_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg data_in;
reg reset;
// wires                                               
wire [6:0] 7seg1;
wire [6:0] 7seg2;
wire baud_done;
wire framing_error;
wire half_baud2;
wire [9:0] output;
wire parity_error;

wire sampler;                             

// assign statements (if any)                          
receiver i1 (
// port map - connection between master ports and signals/registers   
	.\7seg1 (7seg1),
	.\7seg2 (7seg2),
	.baud_done(baud_done),
	.clk(clk),
	.data_in(data_in),
	.framing_error(framing_error),
	.half_baud2(half_baud2),
	.\output (output),
	.parity_error(parity_error),
	.reset(reset)
);

// clk
initial
begin
	clk = 1'b0;
end 

// reset
initial
begin
	reset = 1'b0;
end 

// data_in
initial
begin
	data_in = 1'b0;
end 

receiver_vlg_sample_tst tb_sample (
	.clk(clk),
	.data_in(data_in),
	.reset(reset),
	.sampler_tx(sampler)
);

receiver_vlg_check_tst tb_out(
	.7seg1(7seg1),
	.7seg2(7seg2),
	.baud_done(baud_done),
	.framing_error(framing_error),
	.half_baud2(half_baud2),
	.output(output),
	.parity_error(parity_error),
	.sampler_rx(sampler)
);
endmodule

