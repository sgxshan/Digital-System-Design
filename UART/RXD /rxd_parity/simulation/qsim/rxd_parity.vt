// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/10/2015 15:48:43"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    rxd_parity
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module rxd_parity_vlg_sample_tst(
	in_data,
	sampler_tx
);
input [10:0] in_data;
output sampler_tx;

reg sample;
time current_time;
always @(in_data)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module rxd_parity_vlg_check_tst (
	framing_error,
	parity_error,
	sampler_rx
);
input  framing_error;
input  parity_error;
input sampler_rx;

reg  framing_error_expected;
reg  parity_error_expected;

reg  framing_error_prev;
reg  parity_error_prev;

reg  framing_error_expected_prev;
reg  parity_error_expected_prev;

reg  last_framing_error_exp;
reg  last_parity_error_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	framing_error_prev = framing_error;
	parity_error_prev = parity_error;
end

// update expected /o prevs

always @(trigger)
begin
	framing_error_expected_prev = framing_error_expected;
	parity_error_expected_prev = parity_error_expected;
end



// expected framing_error
initial
begin
	framing_error_expected = 1'bX;
end 

// expected parity_error
initial
begin
	parity_error_expected = 1'bX;
end 
// generate trigger
always @(framing_error_expected or framing_error or parity_error_expected or parity_error)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected framing_error = %b | expected parity_error = %b | ",framing_error_expected_prev,parity_error_expected_prev);
	$display("| real framing_error = %b | real parity_error = %b | ",framing_error_prev,parity_error_prev);
`endif
	if (
		( framing_error_expected_prev !== 1'bx ) && ( framing_error_prev !== framing_error_expected_prev )
		&& ((framing_error_expected_prev !== last_framing_error_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port framing_error :: @time = %t",  $realtime);
		$display ("     Expected value = %b", framing_error_expected_prev);
		$display ("     Real value = %b", framing_error_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_framing_error_exp = framing_error_expected_prev;
	end
	if (
		( parity_error_expected_prev !== 1'bx ) && ( parity_error_prev !== parity_error_expected_prev )
		&& ((parity_error_expected_prev !== last_parity_error_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port parity_error :: @time = %t",  $realtime);
		$display ("     Expected value = %b", parity_error_expected_prev);
		$display ("     Real value = %b", parity_error_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_parity_error_exp = parity_error_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module rxd_parity_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [10:0] in_data;
// wires                                               
wire framing_error;
wire parity_error;

wire sampler;                             

// assign statements (if any)                          
rxd_parity i1 (
// port map - connection between master ports and signals/registers   
	.framing_error(framing_error),
	.in_data(in_data),
	.parity_error(parity_error)
);
// in_data[ 10 ]
initial
begin
	in_data[10] = 1'b1;
end 
// in_data[ 9 ]
initial
begin
	in_data[9] = 1'b0;
end 
// in_data[ 8 ]
initial
begin
	in_data[8] = 1'b1;
end 
// in_data[ 7 ]
initial
begin
	in_data[7] = 1'b0;
end 
// in_data[ 6 ]
initial
begin
	in_data[6] = 1'b1;
end 
// in_data[ 5 ]
initial
begin
	in_data[5] = 1'b1;
end 
// in_data[ 4 ]
initial
begin
	in_data[4] = 1'b0;
end 
// in_data[ 3 ]
initial
begin
	in_data[3] = 1'b1;
end 
// in_data[ 2 ]
initial
begin
	in_data[2] = 1'b0;
end 
// in_data[ 1 ]
initial
begin
	in_data[1] = 1'b0;
end 
// in_data[ 0 ]
initial
begin
	in_data[0] = 1'b1;
end 

rxd_parity_vlg_sample_tst tb_sample (
	.in_data(in_data),
	.sampler_tx(sampler)
);

rxd_parity_vlg_check_tst tb_out(
	.framing_error(framing_error),
	.parity_error(parity_error),
	.sampler_rx(sampler)
);
endmodule

